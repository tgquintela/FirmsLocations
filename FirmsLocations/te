Help on function axvline in module matplotlib.pyplot:

aaxxvvlliinnee(x=0, ymin=0, ymax=1, hold=None, **kwargs)
    Add a vertical line across the axes.
    
    Call signature::
    
      axvline(x=0, ymin=0, ymax=1, **kwargs)
    
    Draw a vertical line at *x* from *ymin* to *ymax*.  With the
    default values of *ymin* = 0 and *ymax* = 1, this line will
    always span the vertical extent of the axes, regardless of the
    ylim settings, even if you change them, e.g., with the
    :meth:`set_ylim` command.  That is, the vertical extent is in
    axes coords: 0=bottom, 0.5=middle, 1.0=top but the *x* location
    is in data coordinates.
    
    Return value is the :class:`~matplotlib.lines.Line2D`
    instance.  kwargs are the same as kwargs to plot, and can be
    used to control the line properties.  e.g.,
    
    * draw a thick red vline at *x* = 0 that spans the yrange::
    
        >>> axvline(linewidth=4, color='r')
    
    * draw a default vline at *x* = 1 that spans the yrange::
    
        >>> axvline(x=1)
    
    * draw a default vline at *x* = .5 that spans the the middle half of
      the yrange::
    
        >>> axvline(x=.5, ymin=0.25, ymax=0.75)
    
    Valid kwargs are :class:`~matplotlib.lines.Line2D` properties,
    with the exception of 'transform':
    
      agg_filter: unknown
      alpha: float (0.0 transparent through 1.0 opaque)         
      animated: [True | False]         
      antialiased or aa: [True | False]         
      axes: an :class:`~matplotlib.axes.Axes` instance         
      clip_box: a :class:`matplotlib.transforms.Bbox` instance         
      clip_on: [True | False]         
      clip_path: [ (:class:`~matplotlib.path.Path`,         :class:`~matplotlib.transforms.Transform`) |         :class:`~matplotlib.patches.Patch` | None ]         
      color or c: any matplotlib color         
      contains: a callable function         
      dash_capstyle: ['butt' | 'round' | 'projecting']         
      dash_joinstyle: ['miter' | 'round' | 'bevel']         
      dashes: sequence of on/off ink in points         
      drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |                   'steps-post']         
      figure: a :class:`matplotlib.figure.Figure` instance         
      fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']         
      gid: an id string         
      label: string or anything printable with '%s' conversion.         
      linestyle or ls: [``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |                   ``' '`` | ``''``]         and any drawstyle in combination with a linestyle, e.g., ``'steps--'``.         
      linewidth or lw: float value in points         
      lod: [True | False]         
      marker: unknown
      markeredgecolor or mec: any matplotlib color         
      markeredgewidth or mew: float value in points         
      markerfacecolor or mfc: any matplotlib color         
      markerfacecoloralt or mfcalt: any matplotlib color         
      markersize or ms: float         
      markevery: None | integer | (startind, stride)
      path_effects: unknown
      picker: float distance in points or callable pick function         ``fn(artist, event)``         
      pickradius: float distance in points         
      rasterized: [True | False | None]         
      sketch_params: unknown
      snap: unknown
      solid_capstyle: ['butt' | 'round' |  'projecting']         
      solid_joinstyle: ['miter' | 'round' | 'bevel']         
      transform: a :class:`matplotlib.transforms.Transform` instance         
      url: a url string         
      visible: [True | False]         
      xdata: 1D array         
      ydata: 1D array         
      zorder: any number         
    
    .. seealso::
    
        :meth:`axhspan`
            for example plot and source code
    
    Additional kwargs: hold = [True|False] overrides default hold state
